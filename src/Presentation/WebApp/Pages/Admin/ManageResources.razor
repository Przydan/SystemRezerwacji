@page "/admin/manage-resources"
@using Application.Interfaces.Persistence
@attribute [Authorize(Roles = "Administrator")]

@inject IResourceService ResourceService
@inject IResourceTypeService ResourceTypeService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Zarządzaj Zasobami</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Zarządzaj Zasobami</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Nav.NavigateTo("/admin/resource/new"))" StartIcon="@Icons.Material.Filled.Add" Class="mb-4">
    Dodaj Nowy Zasób
</MudButton>

@if (resources == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="@resources" Hover="true">
        <HeaderContent>
            <MudTh>Nazwa</MudTh>
            <MudTh>Typ</MudTh>
            <MudTh>Opis</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nazwa">@context.Name</MudTd>
            <MudTd DataLabel="Typ">@context.ResourceTypeName</MudTd>
            <MudTd DataLabel="Opis">@context.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Nav.NavigateTo($"/admin/resource/edit/{context.Id}"))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => OnDeleteClicked(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<ResourceDto>? resources;

    protected override async Task OnInitializedAsync()
    {
        await LoadResources();
    }

    private async Task LoadResources()
    {
        resources = await ResourceService.GetAllResourcesAsync();
    }

    private async Task OnDeleteClicked(Guid resourceId)
    {
        var parameters = new DialogParameters { ["ContentText"] = "Czy na pewno chcesz usunąć ten zasób? Tej operacji nie można cofnąć." };
        var dialog = DialogService.Show<ConfirmDeleteDialog>("Potwierdź usunięcie", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var success = await ResourceService.DeleteResourceAsync(resourceId);
            if (success)
            {
                Snackbar.Add("Zasób został usunięty.", Severity.Success);
                await LoadResources(); // Odśwież listę
            }
            else
            {
                Snackbar.Add("Nie udało się usunąć zasobu.", Severity.Error);
            }
        }
    }
}