@page "/resourcetypes"
@using Application.Interfaces.Persistence
@using Shared.DTOs.Resource
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize] // Wymaga zalogowania!
@inject IResourceTypeService ResourceTypeService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" GutterBottom="true">Typy Zasobów</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else if (resourceTypes is not null && resourceTypes.Any())
{
    <MudTable Items="@resourceTypes" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Nazwa</MudTh>
            <MudTh>Opis</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nazwa">@context.Name</MudTd>
            <MudTd DataLabel="Opis">@context.Description</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudAlert Severity="Severity.Info">Brak zdefiniowanych typów zasobów lub nie udało się załadować danych.</MudAlert>
}

@code {
    private List<ResourceTypeDto>? resourceTypes;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            // ✅ Poprawione wywołanie metody
            resourceTypes = await ResourceTypeService.GetAllResourceTypesAsync();
        }
        catch (Exception ex)
        {
            // Lepsza obsługa błędów
            Snackbar.Add($"Błąd podczas pobierania danych z API: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}