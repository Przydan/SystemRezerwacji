@page "/my-reservations"
@inject IBookingService BookingService
@inject NavigationManager NavigationManager

<PageTitle>Moje Rezerwacje</PageTitle>

<h3>Moje Rezerwacje</h3>

@if (bookings == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (!bookings.Any())
{
    <MudText>Nie masz jeszcze żadnych rezerwacji.</MudText>
}
else
{
    <MudTable Items="bookings" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true">
        <HeaderContent>
            <MudTh>Zasób</MudTh>
            <MudTh>Od</MudTh>
            <MudTh>Do</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Zasób">@context.ResourceName</MudTd>
            <MudTd DataLabel="Od">@context.StartTime.ToString("g")</MudTd>
            <MudTd DataLabel="Do">@context.EndTime.ToString("g")</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Primary"
                               OnClick="@(() => NavigationManager.NavigateTo($"/bookings/edit/{context.Id}"))">
                </MudIconButton>
                
                <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                               Color="Color.Error"
                               OnClick="@(() => CancelBooking(context.Id))"
                               Disabled="@(context.Status != "Confirmed")">
                </MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<BookingDto>? bookings;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }
    
    private async Task LoadBookings()
    {
        bookings = await BookingService.GetMyBookingsAsync();
        StateHasChanged();
    }


    private async Task CancelBooking(Guid bookingId)
    {
        var success = await BookingService.CancelBookingAsync(bookingId);
        if (success)
        {
            // Odśwież listę rezerwacji po pomyślnym anulowaniu
            var bookingToRemove = bookings?.FirstOrDefault(b => b.Id == bookingId);
            if (bookingToRemove != null)
            {
                bookingToRemove.Status = "CancelledByUser";
                StateHasChanged();
            }
        }
        else
        {
            // Obsługa błędu-np. wyświetlenie Snackbar z informacją
            Console.WriteLine("Failed to cancel booking.");
        }
    }
}