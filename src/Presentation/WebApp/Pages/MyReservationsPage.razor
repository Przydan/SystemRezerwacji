@page "/my-reservations"
@using WebApp.Services
@inject IBookingService BookingService

<h3>Moje rezerwacje</h3>

@if (bookings == null)
{
    <p><em>Ładowanie...</em></p>
}
else if (!bookings.Any())
{
    <p>Brak rezerwacji.</p>
}
else
{
    <!-- opcjonalny pasek wyszukiwania -->
    <MudTextField @bind-Value="filterName"
                  Placeholder="Wyszukaj zasób..."
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Clearable="true"
                  Class="mb-4" />

    <MudTable Items="bookings"
              Filter="FilterFunc"
              Hover="true"
              Bordered="true"
              Striped="true">
        <HeaderContent>
            <MudTh>Zasób</MudTh>
            <MudTh>Start</MudTh>
            <MudTh>Koniec</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ResourceName</MudTd>
            <MudTd>@context.StartTime.ToString("g")</MudTd>
            <MudTd>@context.EndTime.ToString("g")</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd>
                <MudButton Color="Color.Error"
                           Variant="Variant.Text"
                           OnClick="@(() => Cancel(context.Id))">
                    Anuluj
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<BookingDto>? bookings;
    private string filterName = "";

    protected override async Task OnInitializedAsync()
    {
        bookings = await BookingService.GetMyBookingsAsync();
    }

    /// <summary>
    /// Zwraca true/false w każdej gałęzi – dzięki temu RazorGenerator nie rypie CS1662
    /// </summary>
    private bool FilterFunc(BookingDto b)
    {
        // możesz tu dołożyć dowolne inne kryteria filtrowania
        return string.IsNullOrWhiteSpace(filterName)
               || b.ResourceName.Contains(filterName, StringComparison.OrdinalIgnoreCase);
    }

    private async Task Cancel(Guid id)
    {
        await BookingService.CancelBookingAsync(id);
        // odśwież listę po anulowaniu
        bookings = await BookingService.GetMyBookingsAsync();
    }
}