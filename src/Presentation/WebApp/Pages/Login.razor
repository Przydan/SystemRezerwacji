@page "/login"
@using global::Shared.DTOs.Auth
@using WebApp.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Logowanie</PageTitle>

<MudGrid Justify="Justify.Center" Class="mt-12">
  <MudItem xs="12" sm="8" md="6" lg="4">
    <MudPaper Class="pa-4" Elevation="3">
      <MudText Typo="Typo.h5" Align="Align.Center">Logowanie</MudText>
      <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <MudTextField T="string"
                      Label="Email"
                      @bind-Value="loginRequest.Email"
                      For="@(() => loginRequest.Email)"
                      Required="true" />
        <MudValidationMessage For="@(() => loginRequest.Email)" />

        <MudTextField T="string"
                      Label="Hasło"
                      InputType="InputType.Password"
                      @bind-Value="loginRequest.Password"
                      For="@(() => loginRequest.Password)"
                      Required="true" />
        <MudValidationMessage For="@(() => loginRequest.Password)" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
          <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }

        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true"
                   Class="mt-4"
                   Disabled="@isProcessing">
          @(isProcessing ? "Logowanie…" : "Zaloguj się")
        </MudButton>
      </EditForm>
      <MudText Align="Align.Center" Class="mt-3">
        Nie masz konta? <MudLink Href="/register">Zarejestruj się</MudLink>
      </MudText>
    </MudPaper>
  </MudItem>
</MudGrid>

@code {
  private LoginRequestDto loginRequest = new();
  private string? errorMessage;
  private bool isProcessing;

  private async Task HandleLogin()
  {
    isProcessing = true;
    errorMessage = null;
    var result = await AuthService.LoginAsync(loginRequest);
    if (result.IsSuccess)
    {
      Snackbar.Add("Zalogowano pomyślnie!", Severity.Success);
      NavigationManager.NavigateTo("/", forceLoad: true);
    }
    else
    {
      errorMessage = result.Message;
      Snackbar.Add(errorMessage, Severity.Error);
    }
    isProcessing = false;
  }
}