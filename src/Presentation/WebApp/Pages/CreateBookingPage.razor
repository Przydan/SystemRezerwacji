@page "/bookings/new/{ResourceId:guid}"
@attribute [Authorize]
@using Shared.DTOs.Booking
@using WebApp.Interfaces
@inject IWebAppBookingService BookingService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Nowa rezerwacja</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Tworzenie nowej rezerwacji</MudText>

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-4">
            <BookingForm Model="newBooking" OnValidSubmit="HandleCreateBooking" ButtonText="Utwórz Rezerwację" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" GutterBottom="true">Zajęte terminy dla tego zasobu</MudText>
            @if (existingBookings == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else if (!existingBookings.Any())
            {
                <MudText>Ten zasób nie ma jeszcze żadnych rezerwacji. Wszystkie terminy są wolne.</MudText>
            }
            else
            {
                <MudList T="BookingDto" Clickable="false">
                    @foreach (var booking in existingBookings)
                    {
                    <MudListItem>
                        <MudText Color="Color.Error">
                            <strong>Od:</strong> @booking.StartTime.ToString("yyyy-MM-dd HH:mm")
                            <strong>Do:</strong> @booking.EndTime.ToString("yyyy-MM-dd HH:mm")
                        </MudText>
                    </MudListItem>
                    }
                </MudList>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public Guid ResourceId { get; set; }

    private BookingRequestDto newBooking = new();
    private List<BookingDto>? existingBookings; // Lista na istniejące rezerwacje

    protected override async Task OnInitializedAsync()
    {
        newBooking.ResourceId = this.ResourceId;
        // Pobierz istniejące rezerwacje podczas inicjalizacji strony
        existingBookings = await BookingService.GetBookingsForResourceAsync(this.ResourceId);
    }

    private async Task HandleCreateBooking()
    {
        var result = await BookingService.CreateBookingAsync(newBooking);

        if (result != null)
        {
            Snackbar.Add("Rezerwacja została utworzona!", Severity.Success);
            NavigationManager.NavigateTo("/my-reservations");
        }
        else
        {
            Snackbar.Add("Nie udało się utworzyć rezerwacji (konflikt terminów lub inny błąd).", Severity.Error);
            // Odśwież listę rezerwacji, na wypadek gdyby ktoś inny właśnie coś zarezerwował
            existingBookings = await BookingService.GetBookingsForResourceAsync(this.ResourceId);
            StateHasChanged(); // Powiadom Blazora o konieczności odświeżenia UI
        }
    }
}