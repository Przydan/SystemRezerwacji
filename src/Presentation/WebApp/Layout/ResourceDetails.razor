@page "/resource/{ResourceId:guid}"
@using System.Security.Claims
@using Application.Interfaces.Booking
@using Application.Interfaces.Persistence
@using Shared.DTOs.Resource
@using Shared.DTOs.Booking
@using WebApp.Components
@using WebApp.Interfaces
@using IResourceService = Application.Interfaces.Persistence.IResourceService
@inject IResourceService ResourceService
@inject IWebAppBookingService BookingService
@inject AuthenticationStateProvider AuthStateProvider

<h3>Szczegóły zasobu</h3>

@if (resource == null)
{
    <p><em>Ładowanie zasobu…</em></p>
}
else
{
    <MudCard Class="mb-4">
        <MudCardContent>
            <h4>@resource.Name</h4>
            <p>@resource.Description</p>
            <p><b>Typ:</b> @resource.ResourceTypeName</p>
            <p><b>Lokalizacja:</b> @resource.Location</p>
            <p><b>Pojemność:</b> @resource.Capacity</p>
        </MudCardContent>
    </MudCard>

    <h4>Kalendarz rezerwacji</h4>

    @if (bookings == null)
    {
        <p><em>Ładowanie rezerwacji…</em></p>
    }
    else if (!bookings.Any())
    {
        <p>Brak rezerwacji dla tego zasobu.</p>
    }
    else
    {
        @foreach (var b in bookings)
        {
            @* Zakładamy, że komponent BookingListItem istnieje i został już poprawiony lub nie wymagał poprawek *@
            <BookingListItem Booking="b"/>
        }
    }
}

@code {
    [Parameter]
    public Guid ResourceId { get; set; }

    private ResourceDto? resource;
    private List<BookingDto>? bookings;

    protected override async Task OnInitializedAsync()
    {
        // 1. Pobierz konkretny zasób po jego ID (wydajne)
        resource = await ResourceService.GetResourceByIdAsync(ResourceId);

        if (resource != null)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (Guid.TryParse(userIdString, out var userId))
                {
                    // 2. Pobierz wszystkie rezerwacje tego użytkownika
                    var allMyBookings = await BookingService.GetMyBookingsAsync();
                    
                    // UWAGA: To jest tymczasowe obejście problemu w projekcie.
                    // Poprawnie powinno się filtrować po ResourceId, ale brakuje go w BookingDto.
                    bookings = allMyBookings
                        .Where(b => b.ResourceName == resource.Name)
                        .ToList();
                }
            }
        }
    }
}