@page "/cancel-booking/{id:guid}"
@using System.Security.Claims
@using Application.Interfaces.Booking
@inject IBookingService BookingService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<h3>Anuluj rezerwację</h3>
<p>Czy na pewno chcesz anulować tę rezerwację?</p>

<MudButton Color="Color.Error"
           Variant="Variant.Filled"
           OnClick="ConfirmCancel">
    Tak, anuluj
</MudButton>
<MudButton Color="Color.Primary"
           Variant="Variant.Text"
           OnClick="@(() => Nav.NavigateTo("/my-reservations"))"
           Class="ml-2">
Nie, wróć
</MudButton>

@code {
    [Parameter]
    public Guid id { get; set; }

    private async Task ConfirmCancel()
    {
        // 1. Pobierz stan uwierzytelnienia użytkownika
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // 2. Wyciągnij ID użytkownika z jego "claims" (oświadczeń)
        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (Guid.TryParse(userIdString, out var userId))
        {
            // 3. Wywołaj serwis z ID rezerwacji ORAZ ID użytkownika
            var success = await BookingService.CancelBookingAsync(id, userId);
            if (success)
            {
                Nav.NavigateTo("/my-reservations");
            }
            // Opcjonalnie: obsłuż przypadek, gdy anulowanie się nie powiedzie
        }
        else
        {
            // Opcjonalnie: obsłuż błąd, np. wyloguj użytkownika lub pokaż komunikat
            Nav.NavigateTo("/login");
        }
    }
}