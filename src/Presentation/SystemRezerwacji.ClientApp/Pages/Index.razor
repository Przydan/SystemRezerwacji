@page "/"
@inject IResourceService ResourceService
@using SystemRezerwacji.ClientApp.Models
@using SystemRezerwacji.ClientApp.Services

<PageTitle>Lista Zasobów</PageTitle>

<h3>Lista Dostępnych Zasobów</h3>

@if (resources == null && isLoading)
{
    <p><em>Ładowanie zasobów...</em></p>
    @* Możesz tu wstawić komponent spinnera, np. z MudBlazor: <MudProgressCircular Indeterminate="true" /> *@
}
else if (resources == null && !string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <p>Nie udało się załadować zasobów: @errorMessage</p>
    </div>
}
else if (resources != null && resources.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Opis</th>
                @* W przyszłości można dodać więcej kolumn *@
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in resources)
            {
                <tr>
                    <td>@resource.Name</td>
                    <td>@resource.Description</td>
                    @* Tutaj mogą być przyciski akcji, np. "Rezerwuj" lub "Zobacz szczegóły" *@
                </tr>
            }
        </tbody>
    </table>
}
else if (resources != null && !resources.Any())
{
    <p><em>Brak dostępnych zasobów.</em></p>
}

@code {
    private List<ResourceDto>? resources;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            resources = await ResourceService.GetResourcesAsync();
            if (resources == null)
            {
                // ResourceService mógł zwrócić null w przypadku błędu komunikacji, który nie rzucił wyjątku
                errorMessage = "Otrzymano nieprawidłową odpowiedź z serwera lub wystąpił problem z połączeniem.";
            }
        }
        catch (Exception ex)
        {
            // Ten catch jest na wszelki wypadek, jeśli ResourceService rzuciłby wyjątek zamiast zwrócić null.
            Console.WriteLine($"Błąd podczas ładowania zasobów na stronie: {ex.Message}");
            errorMessage = $"Wystąpił krytyczny błąd podczas ładowania danych: {ex.Message}";
            resources = null; // Upewnij się, że lista jest nullem, aby wyświetlić błąd
        }
        finally
        {
            isLoading = false;
        }
    }
}