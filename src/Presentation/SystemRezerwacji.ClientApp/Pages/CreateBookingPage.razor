@page "/create-booking"
@using MudBlazor
@using SystemRezerwacji.ClientApp.Services
@using SystemRezerwacji.ClientApp.Models
@inject BookingService BookingService

<h3>Nowa rezerwacja</h3>

<EditForm Model="@model" OnValidSubmit="@SubmitBooking">
    <DataAnnotationsValidator />
    <MudStack Spacing="2">
        <!-- Resource ID field -->
        <MudTextField T="Guid"
                      Label="Id zasobu"
                      @bind="model.ResourceId"
                      Required="true" />

        <!-- Start date and time fields -->
        <MudStack Direction="Row" Spacing="1">
            <MudDatePicker Label="Data rozpoczęcia"
                           @bind-date="startDate"
                           @bind-date:event="DateChanged"
                           Required="true" />
            <MudTimePicker Label="Godzina rozpoczęcia"
                           @bind-time="startTime"
                           @bind-time:event="TimeChanged"
                           Required="true" />
        </MudStack>

        <!-- End date and time fields -->
        <MudStack Direction="Row" Spacing="1">
            <MudDatePicker Label="Data zakończenia"
                           @bind-date="endDate"
                           @bind-date:event="DateChanged"
                           Required="true" />
            <MudTimePicker Label="Godzina zakończenia"
                           @bind-time="endTime"
                           @bind-time:event="TimeChanged"
                           Required="true" />
        </MudStack>

        <!-- Notes field (multiline) -->
        <MudTextField T="string"
                      Label="Notatki"
                      @bind="model.Notes"
                      Lines="3"
                      Placeholder="Opcjonalne uwagi" />

        <!-- Submit button -->
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   Type="Submit">
            Utwórz rezerwację
        </MudButton>
    </MudStack>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <MudAlert Severity="Severity.Success" Elevation="0" Dense="true">
        @successMessage
    </MudAlert>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Elevation="0" Dense="true">
        @errorMessage
    </MudAlert>
}

@code {
    private CreateBookingDto model = new CreateBookingDto();
    private DateTime? startDate;
    private TimeSpan? startTime;
    private DateTime? endDate;
    private TimeSpan? endTime;

    private string? successMessage;
    private string? errorMessage;

    private async Task SubmitBooking()
    {
        if (startDate.HasValue && startTime.HasValue)
            model.StartTime = startDate.Value.Date + startTime.Value;
        if (endDate.HasValue && endTime.HasValue)
            model.EndTime = endDate.Value.Date + endTime.Value;

        try
        {
            await BookingService.CreateBookingAsync(model);
            successMessage = "Rezerwacja została utworzona pomyślnie.";
            errorMessage = null;
            model = new CreateBookingDto();
            startDate = endDate = null;
            startTime = endTime = null;
        }
        catch (Exception ex)
        {
            errorMessage = "Błąd podczas tworzenia rezerwacji: " + ex.Message;
            successMessage = null;
        }
    }
}