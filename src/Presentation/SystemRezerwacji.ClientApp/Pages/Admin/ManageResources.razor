@namespace SystemRezerwacji.ClientApp.Pages.Admin
@page "/admin/resources"
@using ResourceTypeDto = SystemRezerwacji.Application.DTOs.ResourceType.ResourceTypeDto
@attribute [Authorize(Roles = "Administrator")]

@inject ResourceClientService ResourceService
@inject IDialogService DialogService

<h3>Zarządzanie zasobami</h3>

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           OnClick="() => OpenForm(null)"
           StartIcon="@Icons.Material.Filled.Add">
  Dodaj nowy zasób
</MudButton>

<MudTable T="ResourceDto"
          Items="Resources"
          Filter="new Func<ResourceDto,bool>(FilterFunc)"
          Hover="true"
          Bordered="true"
          HorizontalScrollbar="true">
  <ToolBarContent>
    <MudTextField T="string"
                  @bind-Value="filterName"
                  Placeholder="Wyszukaj nazwę..."
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Clearable="true" />

    <MudSelect T="Guid?"
               @bind-Value="selectedTypeId"
               Placeholder="Typ zasobu"
               Clearable="true">
      @foreach (var type in ResourceTypes)
      {
        <MudSelectItem Value="type.Id">@type.Name</MudSelectItem>
      }
    </MudSelect>

    <MudCheckBox T="bool"
                 @bind-Checked="onlyActive"
                 Label="Tylko aktywne"
                 Class="mx-4" />
  </ToolBarContent>

  <HeaderContent>
    <MudTh>Nazwa</MudTh>
    <MudTh>Typ</MudTh>
    <MudTh>Lokalizacja</MudTh>
    <MudTh>Pojemność</MudTh>
    <MudTh>Aktywny?</MudTh>
    <MudTh>Akcje</MudTh>
  </HeaderContent>

  <RowTemplate>
    <MudTd>@context.Name</MudTd>
    <MudTd>@context.ResourceTypeName</MudTd>
    <MudTd>@context.Location</MudTd>
    <MudTd>@context.Capacity</MudTd>
    <MudTd>@(context.IsActive ? "Tak" : "Nie")</MudTd>
    <MudTd>
      <MudIconButton Icon="@Icons.Material.Filled.Edit"
                     Color="Color.Primary"
                     Size="Size.Small"
                     OnClick="() => OpenForm(context)" />
      <MudIconButton Icon="@Icons.Material.Filled.Delete"
                     Color="Color.Error"
                     Size="Size.Small"
                     OnClick="() => ConfirmDelete(context)" />
    </MudTd>
  </RowTemplate>
</MudTable>

@if (isFormOpen)
{
  <ResourceForm Model="selectedResource"
                ResourceTypes="ResourceTypes"
                OnCancel="CloseForm"
                OnSave="OnSaveResource" />
}

@code {
  private List<ResourceDto>? Resources = new();
  private List<Models.ResourceTypeDto>? ResourceTypes = new();
  private string filterName = string.Empty;
  private Guid? selectedTypeId = null;
  private bool onlyActive = false;

  private ResourceDto selectedResource = new();
  private bool isFormOpen = false;

  protected override async Task OnInitializedAsync()
  {
    ResourceTypes = await ResourceService.GetResourceTypesAsync();
    await LoadResources();
  }

  private async Task LoadResources()
  {
    Resources = await ResourceService.GetResourcesAsync();
  }

  private bool FilterFunc(ResourceDto item) =>
    (string.IsNullOrWhiteSpace(filterName) || item.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase))
    && (selectedTypeId == null || item.ResourceTypeId == selectedTypeId)
    && (!onlyActive || item.IsActive);

  private void OpenForm(ResourceDto? resource)
  {
    if (resource != null)
      selectedResource = new ResourceDto(resource);
    else
      selectedResource = new ResourceDto();

    isFormOpen = true;
  }

  private void CloseForm() => isFormOpen = false;

  private async Task OnSaveResource(ResourceDto _)
  {
    isFormOpen = false;
    await LoadResources();
  }

  private async Task ConfirmDelete(ResourceDto resource)
  {
    bool? result = await DialogService.ShowMessageBox(
      "Potwierdź usunięcie",
      $"Czy na pewno usunąć zasób „{resource.Name}”?",
      yesText: "Usuń",
      noText: "Anuluj",
      options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall }
    );

    if (result == true)
    {
      await ResourceService.DeleteResourceAsync(resource.Id);
      await LoadResources();
    }
  }
}