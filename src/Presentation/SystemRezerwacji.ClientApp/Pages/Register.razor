@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using SystemRezerwacji.ClientApp.Models

<h3>Rejestracja</h3>

<EditForm Model="@registerRequestModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="emailReg" class="form-label">Email:</label>
        <InputText id="emailReg" class="form-control" @bind-Value="registerRequestModel.Email" />
        <ValidationMessage For="@(() => registerRequestModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="passwordReg" class="form-label">Hasło:</label>
        <InputText id="passwordReg" type="password" class="form-control" @bind-Value="registerRequestModel.Password" />
        <ValidationMessage For="@(() => registerRequestModel.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPasswordReg" class="form-label">Potwierdź hasło:</label>
        <InputText id="confirmPasswordReg" type="password" class="form-control" @bind-Value="registerRequestModel.ConfirmPassword" />
        <ValidationMessage For="@(() => registerRequestModel.ConfirmPassword)" />
    </div>

    @* Opcjonalne pola Imię, Nazwisko *@
    <div class="mb-3">
        <label for="firstNameReg" class="form-label">Imię (opcjonalnie):</label>
        <InputText id="firstNameReg" class="form-control" @bind-Value="registerRequestModel.FirstName" />
        <ValidationMessage For="@(() => registerRequestModel.FirstName)" />
    </div>

    <div class="mb-3">
        <label for="lastNameReg" class="form-label">Nazwisko (opcjonalnie):</label>
        <InputText id="lastNameReg" class="form-control" @bind-Value="registerRequestModel.LastName" />
        <ValidationMessage For="@(() => registerRequestModel.LastName)" />
    </div>


    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Rejestrowanie...</span>
        }
        else
        {
            <span>Zarejestruj</span>
        }
    </button>
</EditForm>

@code {
    private RegisterRequest registerRequestModel = new RegisterRequest();
    private string? errorMessage;
    private string? successMessage;
    private bool isProcessing = false;

    private async Task HandleRegister()
    {
        isProcessing = true;
        errorMessage = null;
        successMessage = null;
        try
        {
            var success = await AuthService.Register(registerRequestModel);
            if (success)
            {
                successMessage = "Rejestracja zakończona pomyślnie. Możesz się teraz zalogować.";
                // Opcjonalnie: Przekierowanie na stronę logowania lub automatyczne logowanie
                // NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Rejestracja nie powiodła się. Sprawdź dane i spróbuj ponownie.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            Console.WriteLine($"Błąd rejestracji: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
