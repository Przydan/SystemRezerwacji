@using ResourceTypeDto = SystemRezerwacji.Application.DTOs.ResourceType.ResourceTypeDto
@namespace SystemRezerwacji.ClientApp.Components
@inject ResourceClientService ResourceService

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <MudTextField T="string"
                Label="Nazwa"
                @bind-Value="Model.Name"
                Required="true" />

  <MudTextField T="string"
                Label="Opis"
                @bind-Value="Model.Description"
                Lines="4" />

  <MudTextField T="string"
                Label="Lokalizacja"
                @bind-Value="Model.Location" />

  <MudNumericField T="int"
                   Label="Pojemność"
                   @bind-Value="Model.Capacity" />

  <MudSelect T="Guid"
             Label="Typ zasobu"
             @bind-Value="Model.ResourceTypeId"
             Required="true">
    @foreach (var type in ResourceTypes)
    {
      <MudSelectItem Value="type.Id">@type.Name</MudSelectItem>
    }
  </MudSelect>

  <MudCheckBox T="bool"
               @bind-Checked="Model.IsActive"
               Label="Aktywny" />

  <div class="mt-3">
    <MudButton Color="Color.Primary"
               Variant="Variant.Filled"
               Type="submit">
      Zapisz
    </MudButton>
    <MudButton Color="Color.Secondary"
               Variant="Variant.Text"
               Type="button"
               OnClick="OnCancelClicked"
               Class="ml-2">
      Anuluj
    </MudButton>
  </div>
</EditForm>

@code {
  [Parameter]
  public ResourceDto Model { get; set; } = new();

  [Parameter]
  public List<ResourceTypeDto> ResourceTypes { get; set; } = new();

  [Parameter]
  public EventCallback OnCancel { get; set; }

  [Parameter]
  public EventCallback<ResourceDto> OnSave { get; set; }

  private async Task HandleValidSubmit()
  {
    if (Model.Id == 0)
      await ResourceService.CreateResourceAsync(Model);
    else
      await ResourceService.UpdateResourceAsync(Model);

    await OnSave.InvokeAsync(Model);
  }

  private Task OnCancelClicked() => OnCancel.InvokeAsync();
}